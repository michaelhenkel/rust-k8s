/*
Copyright 2020 Juniper Networks.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";
import "ssd-git.juniper.net/contrail/cn2/third_party/apiserver-builder-alpha/pkg/builders/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// APSAttribute defines the sequence number associated with FireWall Policy referred by given APS.
message APSAttribute {
  // Sequence number of a FireWallPolicy
  optional string sequence = 1;
}

// AddressFamilies contains a list of BGP address families supported by BGP router
message AddressFamilies {
  // BGP address families supported by BGP router
  repeated string family = 1;
}

// AddressGroup describes the set of CIDRs associated with the FirewallRule resource.
// +k8s:openapi-gen=true
// +resource:path=addressgroups,strategy=AddressGroupStrategy,shortname=ag,categories=contrail;security
message AddressGroup {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the AddressGroup.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional AddressGroupSpec spec = 2;

  // The most recently observed status of the AddressGroup.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional AddressGroupStatus status = 3;
}

// AddressGroupList is a list of AddressGroup.
message AddressGroupList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the AddressGroup instances in the AddressGroupList.
  repeated AddressGroup items = 2;
}

// AddressGroupPrefix describes the CIDR configuration.
message AddressGroupPrefix {
  // Subnet defines the IP prefix and length.
  repeated FirewallSubnet subnet = 1;
}

// AddressGroupSpec describes the set of CIDRs associated with the FirewallRule resource.
message AddressGroupSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // AddressGroupPrefixes defines list of subnets used to match a group of workloads.
  // +optional
  optional AddressGroupPrefix addressGroupPrefixes = 2;
}

// AddressGroupStatus defines the observed state of AddressGroup.
message AddressGroupStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// AllowedAddressPair allows the additional IP/MAC pairs to the guest
// interface. The traffic matching to specified value of IP/MAC will be redirected.
message AllowedAddressPair {
  // IPAddress defines the IPv4 or IPv6 address of the pair.
  // +optional
  optional AllowedAddressPairSubnet ip = 1;

  // MACAddress defines the media access control ID of the NIC..
  // +optional
  optional string mac = 2;

  // AddressMode active-standby is used for VRRP address.
  // AddressMode active-active is used for ECMP.
  // +optional
  optional string addressMode = 3;
}

// AllowedAddressPairSubnet defines the IP prefix and length.
message AllowedAddressPairSubnet {
  // Network prefix
  optional string ipPrefix = 1;

  // Network prefix length
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
}

// AllowedAddressPairs is a list of AllowedAddressPair.
message AllowedAddressPairs {
  repeated AllowedAddressPair allowedAddressPair = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// ApplicationPolicy defines set of firewall policies belonging to a given application tag for project/namespace resources (VN, VM or VMI).
// +k8s:openapi-gen=true
// +resource:path=applicationpolicysets,strategy=ApplicationPolicySetStrategy,shortname=aps,categories=contrail;security
message ApplicationPolicySet {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the ApplicationPolicySet.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ApplicationPolicySetSpec spec = 2;

  // The most recently observed status of the ApplicationPolicySet.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ApplicationPolicySetStatus status = 3;
}

// ApplicationPolicySetList is a list of ApplicationPolicySet.
message ApplicationPolicySetList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the ApplicationPolicySet instances in the ApplicationPolicySetList.
  repeated ApplicationPolicySet items = 2;
}

// ApplicationPolicySetSpec defines the desired state of a FirewallPolicy.
message ApplicationPolicySetSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // FirewallPolicyReferences contains references to FirewallPolicy associated with the ApplicationPolicySet.
  repeated FirewallPolicyReference firewallPolicyReferences = 2;

  // TagReferences contains references to Tags attached to the ApplicationPolicySet.
  repeated ResourceReference tagReferences = 3;
}

// ApplicationPolicySetStatus defines the observed state of ApplicationPolicySet.
message ApplicationPolicySetStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // ApplicatioPolicySet to be applied to all application tags.
  optional bool allApplications = 3;
}

// Authentication related configuration for this session like type, keys etc.
// Only md5 authentication is supported.
message AuthenticationData {
  // Authentication type for this session. Currently, only MD5 is supported.
  // +optional
  optional string keyType = 1;

  // Upto two keys can be specified. Currently, only one key is supported.
  // +optional
  repeated AuthenticationKeyItem keyItems = 2;
}

// AuthenticationKeyItem is used for BGP session authentication configuration.
message AuthenticationKeyItem {
  optional int32 keyId = 1;

  optional string key = 2;
}

// BGPAsAService determines the configuration of BGP peers.
// All the BGP peers involved in Contrail are present inthe default
// RoutingInstance of the default VirtualNetwork.
// +k8s:openapi-gen=true
// +resource:path=bgpasaservices,strategy=BGPAsAServiceStrategy,shortname=bgpaas,categories=contrail;networking
message BGPAsAService {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the BGPAsAService.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional BGPAsAServiceSpec spec = 2;

  // The most recently observed status of the BGPAsAService.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional BGPAsAServiceStatus status = 3;
}

// BGPAsAServiceList is a list of BGPAsAService.
message BGPAsAServiceList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the BGPAsAService instances in the BGPAsAServiceList.
  repeated BGPAsAService items = 2;
}

// BGPAsAServiceSpec defines the desired state of a BGPAsAService.
message BGPAsAServiceSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Shared is enabled to link all VMIs with the common bgp-router object.
  // When false (default), each virtual machine interface individually links to
  // its own bgp-router object.
  // +optional
  optional bool shared = 2;

  // IPAddress specifies the source-address of a BGPaaS VM/pod.
  // +optional
  optional string ipAddress = 3;

  // AutonomousSystem is 16-bit BGP Autonomous System number for the cluster.
  optional int32 autonomousSystem = 4;

  // SuppressRouteAdvertisement indicates that the server should not advertise
  // any routes to the client i.e. the client has static routes (typically a
  // default) configured, default set to false.
  // +optional
  optional bool suppressRouteAdvertisement = 5;

  // IPv4MappedIPv6NextHop indicates if the client bgp implementation expects
  // to receive a ipv4-mapped ipv6 address (as opposed to regular ipv6
  // address) as the bgp nexthop for ipv6 routes.
  // +optional
  optional bool ipv4MappedIPv6NextHop = 6;

  // BGPAsAServiceSessionAttributes defines session attributes such as hold time,
  // route origin and loop count.
  // +optional
  optional BGPSessionAttributes bgpAsAServiceSessionAttributes = 7;

  // VirtualMachineInterfaceReferences determines the VirtualMachineInterfaces
  // on which BGPaaS BGP peering will happen.
  // +optional
  repeated ResourceReference virtualMachineInterfaceReferences = 8;

  // VirtualMachineInterfacesSelector selects VirtualMachineInterfaces using
  // the 'core.juniper.net/bgpaasVN' label defined on pods. BGPAsAService will be configured on
  // the union of VMIs selected by label and VMI specified through
  // VirtualMachineInterfaceReferences.
  // +optional
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualMachineInterfacesSelector = 9;
}

// BGPAsAServiceStatus defines the observed state of BGPAsAService.
message BGPAsAServiceStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // BGPRouterReferences contains references to all BGPRouters created
  // for a for BGPAsAService session.
  // +optional
  repeated BGPRouterReference bgpRouterReferences = 2;

  // SubnetReferences contains references to all subnets associated with
  // the selected VirtualMachineInterfaces' VirtualNetwork.
  // +optional
  repeated SubnetReference subnetReferences = 3;
}

// This type is used to configure per address-family parameters
// for a BgpSession.
// * loop-count is the number of times the local bgp-router's AS is
//   allowed in the AS_PATH attribute.
// * prefix-limit contains the maximum number of prefixes that are
//   allowed to be received on the session.
message BGPFamilyAttributes {
  // Address family for which these parameters are applied.
  // +optional
  optional string addressFamily = 1;

  // For routing loop detection, loop-count is the number of times the local bgp-routers AS is
  // allowed in the AS_PATH attribute.
  // +optional
  optional int32 loopCount = 2;

  // PrefixLimit contains the maximum number of prefixes that are allowed to be received on the session for this address family.
  // +optional
  optional BGPPrefixLimit prefixLimit = 3;

  // Default prioritized tunnel encapsulation list.
  // +optional
  repeated string defaultTunnelEncap = 4;
}

// This is used to configure the maximum number of received prefixes
// and control the behavior of the session when the maximum is reached.
message BGPPrefixLimit {
  // Time in seconds after which the session is allowed to re-establish after teardown.
  // +optional
  optional int32 idleTimeout = 1;

  // Maximum number of prefixes allowed to be recieved
  // +optional
  optional int32 maximum = 2;
}

// BGPRouter object represent configuration of BGP peers.
// All the BGP peers involved in Contrail system are under default Routing
// Instance of the default Virtual Network.
// +k8s:openapi-gen=true
// +resource:path=bgprouters,strategy=BGPRouterStrategy,shortname=br,categories=contrail;routing
message BGPRouter {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // BGPRouterSpec defines the desired state of BGPRouter.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  optional BGPRouterSpec spec = 2;

  // BGPRouterStatus defines the observed state of BGPRouter
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional BGPRouterStatus status = 3;
}

// BGPRouterList is a list of BGPRouter.
message BGPRouterList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the BGPRouter instances in the BGPRouterList.
  repeated BGPRouter items = 2;
}

// BGPRouterParameters contains BGP router configuration parameters like
// IP address, AS number, hold time etc.
message BGPRouterParameters {
  // Administratively up or down BGPRouter, session is not established
  // for the BGPRouter.
  // +optional
  optional bool adminDown = 1;

  // Vendor name for this BGP router.
  // +optional
  optional string vendor = 2;

  // Cluster ID for this BGP router (between 1 and 4294967295)
  // when control node is configured as route reflector.
  // +optional
  optional int64 clusterID = 3;

  // Autonomous System number for this BGP router. For contrail control nodes,
  // this is derived from GlobalSystemConfig AutonomousSystem.
  // +optional
  optional int32 autonomousSystem = 4;

  // Router ID for this BGP router. Dotted ip notation. For Contrail
  // control-nodes system will automatically assign value of address field.
  // +optional
  optional string identifier = 5;

  // IP address used to reach this BGP router by the system.
  // +optional
  optional string address = 6;

  // TCP port number on which BGP protocol connections are accepted.
  // Default is port 179
  // +optional
  optional int32 port = 7;

  // For system internal use in BGPaaS service.
  // +optional
  optional int32 sourcePort = 8;

  // BGPHoldTime is time in seconds [0-65535], maximum time to detect
  // liveliness to peer. Value 0 will result in default value of 90 seconds.
  // +optional
  optional int32 holdTime = 9;

  // BGP address families supported by BGP router. If not specified
  // these address families are enabled:
  // "inet, inet-labeled, inet-vpn, e-vpn, erm-vpn, route-target, inet6,
  // inet-mvpn, inet6-vpn"
  // +optional
  optional AddressFamilies addressFamilies = 10;

  // Authentication related configuration like type, keys etc.
  // +optional
  optional AuthenticationData authData = 11;

  // BGPRouter specific Autonomous System number if different from global AS
  // number. Typically used when clusters of control nodes in same contrail
  // system are in different locations.
  // +optional
  optional int32 localAutonomousSystem = 12;

  // BGPRouter type.
  // +optional
  optional string routerType = 13;

  // GatewayAddress field is used only for router-type bgpaas-client.
  // It holds the IPv4 gateway address for the IPv4 subnet from which the
  // client has IP address. The value is used as nexthop when advertising
  // routes to the client via bgp.
  // +optional
  optional string gatewayAddress = 14;

  // IPv6GatewayAddress field is used only for router-type bgpaas-client
  // It holds IPv6 gateway address for IPv6 subnet from which the client has
  // IP address. The value is used as nexthop when advertising routes to the
  // client via bgp.
  // Note that the IPv6GatewayAddress can be a regular IPv6 address or a
  // ipv4-mapped-ipv6 adddress.
  // +optional
  optional string ipv6GatewayAddress = 15;
}

// BGPRouterReference contains BGP Router peering and its session configurations.
message BGPRouterReference {
  // ResourceReference for BGPRouter resource
  // +optional
  optional ResourceReference resourceReference = 1;

  // attributes configuration for the BGPRouter reference.
  // +optional
  optional BGPRouterReferenceAttributes attributes = 2;
}

// BGPRouterReferenceAttributes defines the attributes for 1 (typically) or more sessions between two BGP Routers.
message BGPRouterReferenceAttributes {
  // Seesion is a list of BGP sessions parameters.
  // There can be multiple BGP sessions between two BGP routers.
  // Currently, only 1 session is supported.
  // +optional
  repeated BGPSession session = 1;
}

// BGPRouterSpec defines the desired state of BGPRouter
message BGPRouterSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Object reference to routing-instance parent
  optional k8s.io.api.core.v1.ObjectReference parent = 2;

  // BGPRouterReferences list of references to all bgp routers in the cluster.
  // +optional
  repeated BGPRouterReference bgpRouterReferences = 4;

  // BGP router configuration parameters like IP address, AS number, hold time etc.
  // +optional
  optional BGPRouterParameters bgpRouterParameters = 3;
}

// BGPRouterStatus defines the observed state of BGPRouter
message BGPRouterStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// BGPSession defines the attributes for 1 (typically) or more sessions between two BGP Routers.
message BGPSession {
  // There can be up to 3 instances BGP session attributes,
  // representing configuration for both ends and common.
  // Currently, only 1 instance representing common attributes is supported.
  // +optional
  repeated BGPSessionAttributes sessionAttributes = 1;
}

// BGPSessionAttributes defines the BGP session parameters configuration.
message BGPSessionAttributes {
  // When the parameters are uni-directional the bgp-router element specifies
  // to which node the configuration applies. If missing the attributes apply
  // to both ends of the session.
  // +optional
  optional string bgpRouter = 1;

  // Administratively mark this session down.
  // +optional
  optional bool adminDown = 2;

  // This is passive session. It will not initiated connection.
  // This is not relevant when session attributes represent common part.
  // It is recommended that it should not be set to true in current release.
  // +optional
  optional bool passive = 3;

  // ASOverride flag is used to replace the AS number of the
  // control node with the AS number of the tenant VM.
  // +optional
  optional bool asOverride = 4;

  // A non-zero hold-time overrides the hold-time inherited from the
  // bgp-router configuration. BGP hold time in seconds [0-65535],
  // Max time to detect liveliness of peer.
  // +optional
  optional int32 holdTime = 5;

  // For routing loop detection, loop-count is the number of times
  // the local AS is allowed in the AS_PATH attribute.
  // +optional
  optional int32 loopCount = 6;

  // Local autonomous system number used for this particular session.
  // If configured, this overrides autonomous-system number and
  // local-autonomous-system number configured under BgpRouterParams
  // +optional
  optional int32 localAutonomousSystem = 7;

  // BGP address families supported on this session. If not specified
  // these address families are enabled:
  // "inet, inet-labeled, inet-vpn, e-vpn, erm-vpn, route-target, inet6,
  // inet-mvpn, inet6-vpn"
  // +optional
  optional AddressFamilies addressFamilies = 8;

  // Authentication related configuration for this session like type, keys.
  // Only md5 authentication is supported.
  // +optional
  optional AuthenticationData authData = 9;

  // Session attributes over ride per BGP address family. Attributes like address family, loop-count and prefix-limit.
  // +optional
  repeated BGPFamilyAttributes familyAttributes = 10;

  // Remove or replace private ASes from AS Path attributes advertised to this session.
  // +optional
  optional string privateAsAction = 11;

  // User defined route origin value to override
  // +optional
  optional RouteOriginOverride routeOriginOverride = 12;
}

// BGPSessionIPAttributes contains BGPSession primary and secondary IP addresses.
message BGPSessionIPAttributes {
  // BGPaaSPrimaryIP defines the primary IP address used for a BGP session.
  // +optional
  optional string bgpaasPrimaryIP = 1;

  // BGPaaSSecondaryIP defines the secondary IP address used for a BGP session
  // when a second control node is present.
  // +optional
  optional string bgpaasSecondaryIP = 2;
}

// CommonSpec contains Contrail resource fields all types must implement in their spec.
message CommonSpec {
  optional ContrailFqName contrailFqName = 1;
}

// CommonStatus contains Contrail resource fields all types must implement in their status
message CommonStatus {
  optional ReconcilerState reconcilerState = 1;
}

// ContrailFqName contains the specific FqName field necessary for the Contrail
// Control-node.
message ContrailFqName {
  // FqName is the list of resource names that fully qualify a Contrail resource.
  // +optional
  repeated string fqName = 1;
}

// EncapsulationPriorities is an ordered list of encapsulation types to be
// used in priority by the vrouter.
message EncapsulationPriorities {
  // Encapsulation is an ordered list of encapsulation types to be used in
  // priority by the vrouter. Valid encapsulation types include MPLSoGRE, MPLSoUDP,
  // and VXLAN.
  repeated string encapsulation = 1;
}

// FirewallActionListType defines types of actions performed by FirewallRule.
message FirewallActionListType {
  // SimpleAction defines allow(i.e. pass) or deny action for traffic matching this FirewallRule.
  // +optional
  optional string simpleAction = 1;
}

// FirewallPolicy contains references to ordered FirewallRule objects.
// +k8s:openapi-gen=true
// +resource:path=firewallpolicies,strategy=FirewallPolicyStrategy,shortname=fp,categories=contrail;security
message FirewallPolicy {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the FirewallPolicy.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FirewallPolicySpec spec = 2;

  // The most recently observed status of the FirewallPolicy.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FirewallPolicyStatus status = 3;
}

// FirewallPolicyAttribute defines the actual Sequence number of a FirewallRule referenced by a FirewallPolicy.
message FirewallPolicyAttribute {
  // Sequence defines the position of a referenced FirewallRule within the evaluation order of a FirewallPolicy.
  // FirewallRules are evaluated in descending order.
  // +optional
  optional string sequence = 1;
}

// FirewallPolicyList is a list of FirewallPolicy.
message FirewallPolicyList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the FirewallPolicy instances in the FirewallPolicyList.
  repeated FirewallPolicy items = 2;
}

// FirewallPolicyReference is a ResourceReference to a FirewallPolicy with APSAttributes containing the Sequence number.
message FirewallPolicyReference {
  // ResourceReference to FirewallPolicy from ApplicationPolicySet.
  optional ResourceReference resourceReference = 1;

  // Attribute defines the sequence number of a FirewallPolicy in [a given|the] ApplicationPolicySet.
  optional APSAttribute attributes = 2;
}

// FirewallPolicySpec defines the desired state of FirewallPolicy.
message FirewallPolicySpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // FirewallRuleReferences contains references to FirewallRule instances attached to this FirewallPolicy.
  // +optional
  repeated FirewallRuleReference firewallRule = 3;
}

// FirewallPolicyStatus defines the observed state of FirewallPolicy.
message FirewallPolicyStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// FirewallRule defines how traffic is allowed or blocked based on rules
// with help of various match and action fields.
// +k8s:openapi-gen=true
// +resource:path=firewallrules,strategy=FirewallRuleStrategy,shortname=fr,categories=contrail;security
message FirewallRule {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the FirewallRule.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FirewallRuleSpec spec = 2;

  // The most recently observed status of the FirewallRule.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FirewallRuleStatus status = 3;
}

// FirewallRuleEndpointType defines the EndpointType.
message FirewallRuleEndpointType {
  // Subnet defines the IP prefix and length.
  // +optional
  optional FirewallSubnet subnet = 1;

  // Addressgroup defines what CIDR FirewallRule can be applied on.
  // +optional
  optional string addressGroup = 3;

  // Tags define tags for the FirewallRule.
  // +optional
  repeated string tags = 4;

  // TagIds define IDs created for referred Tags.
  // +optional
  repeated int64 tagIds = 5;

  // Any defines matching to "any" value in an FirewallRuleEndpointType . ie "*"
  // +optional
  optional bool any = 6;
}

// FirewallRuleList is a list of FirewallRule.
message FirewallRuleList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the FirewallRule instances in the FirewallRuleList.
  repeated FirewallRule items = 2;
}

// FirewallRuleReference is a ResourceReference to a FirewallRule with a FirewallPolicyAttribute containing the Sequence Number.
message FirewallRuleReference {
  // ResourceReference to FirewallRule from FirewallPolicy.
  // +optional
  optional ResourceReference resourceReference = 1;

  // Attribute defines the Sequence Number of a FirewallRule in [a given|the] FirewallPolicy.
  // +optional
  optional FirewallPolicyAttribute attributes = 2;
}

message FirewallRuleSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // AddressGroupReference refers to an AddressGroup defining the CIDR of a FirewallRule.
  // +optional
  optional ResourceReference addressGroupReference = 2;

  // ActionList defines actions to be performed if packets match condition.
  // +optional
  optional FirewallActionListType actionList = 3;

  // Service defines the service (port, protocol) for packets match condition.
  // +optional
  optional FirewallServiceType service = 4;

  // Endpoint1 defines match condition for source traffic.
  // +optional
  optional FirewallRuleEndpointType Endpoint1 = 5;

  // Endpoint2 defines match condition for destination traffic.
  // +optional
  optional FirewallRuleEndpointType Endpoint2 = 6;

  // MatchTags defines matching tags for source and destination endpoints.
  // +optional
  repeated string matchTags = 7;

  // MatchTagsTypes defines matching tags ids for source and destination endpoints.
  // +optional
  repeated int64 matchTagsTypes = 8;

  // Direction defines direction in the FirewallRule.
  // +optional
  optional string direction = 9;

  // TagReferences refers to Tags associated with the FirewallRule.
  // +optional
  repeated ResourceReference tagReferences = 10;
}

// FirewallRuleStatus defines the observed state of FirewallRule.
message FirewallRuleStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// FirewallServiceType defines the Port related info.
message FirewallServiceType {
  // Protocol defines Layer 4 protocol in IP packet.
  // +optional
  optional string protocol = 1;

  // ProtocolId defines Layer 4 protocol ID in IP packet.
  // +optional
  optional int64 protocolId = 2;

  // SourcePorts defines the range of source port numbers for Layer 4 Protocol.
  // +optional
  optional PortType sourcePorts = 3;

  // DestinationPorts defines the range of destination port numbers for Layer 4 Protocol.
  // +optional
  optional PortType destinationPorts = 4;
}

// FirewallSubnet defines the IP prefix and length.
message FirewallSubnet {
  // Network prefix
  optional string ipPrefix = 1;

  // Network prefix length
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
}

// FloatingIP defines a floating IP address.
// +k8s:openapi-gen=true
// +resource:path=floatingips,strategy=FloatingIPStrategy,shortname=fip,categories=contrail;ipam;networking
message FloatingIP {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the FloatingIP.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FloatingIPSpec spec = 2;

  // The most recently observed status of the FloatingIP.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional FloatingIPStatus status = 3;
}

// FloatingIPList is a list of FloatingIP.
message FloatingIPList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the FloatingIP instances in the FloatingIPList.
  repeated FloatingIP items = 2;
}

// FloatingIPPortMappings is the list port mappings associated with a given FloatingIP.
message FloatingIPPortMappings {
  // PortMappings is a list of FloatingIPPortPortMapping instances.
  repeated FloatingIPPortPortMapping portMappings = 1;
}

// FloatingIPPortPortMapping indicates ports exposed by the service.
message FloatingIPPortPortMapping {
  // Source Port
  // +optional
  optional int32 srcPort = 1;

  // Destination Port
  // +optional
  optional int32 dstPort = 2;

  // Network protocol
  // +optional
  optional string protocol = 3;
}

// FloatingIPSpec defines the FloatingIP parameters, used for natting pod IPAddress.
message FloatingIPSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // IP address value for floating IP.
  // +optional
  optional string floatingIPAddress = 2;

  optional FloatingIPPortMappings floatingIPPortMappings = 3;

  // Defines traffic flow direction,(ingress,egress or both),default = both
  // +optional
  optional string floatingIPTrafficDirection = 4;

  // Parent refers to the InstanceIP associated with the FloatingIP.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference parent = 5;

  // VirtualMachineInterfaceReferences determines the VirtualMachineInterface
  // of the VirtualMachine associated with this floating IP.
  // +optional
  repeated ResourceReference virtualMachineInterfaceReferences = 7;

  // FloatingIPEnablePortMapping controls which ports FloatingIP NAT is applied to.
  // If false, FloatingIP NAT is performed for all Ports.
  // If true, FloatingIP NAT is limited to the defined list of PortMaps.
  optional bool floatingIPPortMappingsEnable = 8;
}

// FloatingIPStatus defines the observed state of the FloatingIP.
message FloatingIPStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // SubnetReference the floating IP address belongs to.
  // +optional
  optional ResourceReference subnetReference = 2;
}

// GlobalSystemConfig defines all the global Contrail configurations. This object
// must be unique for a Contrail deployment with the name
// 'default-global-system-config'.
// +k8s:openapi-gen=true
// +resource:path=globalsystemconfigs,strategy=GlobalSystemConfigStrategy,shortname=gsc,categories=contrail;contrail-cluster
message GlobalSystemConfig {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the GlobalSystemConfig.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional GlobalSystemConfigSpec spec = 2;

  // The most recently observed status of the GlobalSystemConfig.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional GlobalSystemConfigStatus status = 3;
}

// GlobalSystemConfigList is a list of GlobalSystemConfig.
message GlobalSystemConfigList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the GlobalSystemConfig instances in the GlobalSystemConfigList.
  repeated GlobalSystemConfig items = 2;
}

// GlobalSystemConfigSpec defines the desired state of the GlobalSystemConfig.
message GlobalSystemConfigSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Enable4bytesAS enables 32-bit Autonomous System number support when true.
  // When false (the default), ASN is 16-bit.
  // +optional
  optional bool enable4bytesAS = 2;

  // AutonomousSystem number for the cluster. By default, this number is 16-bits and has
  // a maximum value of 65535 unless Enable4bytesAS is true, in which case the maximum
  // value is 4294967295.
  // +optional
  optional int32 autonomousSystem = 3;

  // BGPRouterReferences is the list of references to all BGPRouter instances
  // in the cluster.
  // +optional
  repeated ResourceReference bgpRouterReferences = 4;

  // IBGPAutoMesh will automatically create an iBGP mesh if set to true (default).
  // +optional
  optional bool ibgpAutoMesh = 5;

  // DefaultEnableSNAT will enable FabricSNAT by default on all VNs if true.
  // VirtualNetworkSpec.FabricSNAT will override this value.
  // +optional
  optional bool defaultEnableSNAT = 6;
}

// GlobalSystemConfigStatus defines the observed state of the GlobalSystemConfig.
message GlobalSystemConfigStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// GlobalVrouterConfig defines all the vrouter Contrail configurations. This
// object must be unique for a Contrail deployment with the name
// 'default-global-vrouter-config'.
// +k8s:openapi-gen=true
// +resource:path=globalvrouterconfigs,strategy=GlobalVrouterConfigStrategy,shortname=gvc,categories=contrail;contrail-cluster
message GlobalVrouterConfig {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the GlobalVrouterConfig.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional GlobalVrouterConfigSpec spec = 2;

  // The most recently observed status of the GlobalVrouterConfig.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional GlobalVrouterConfigStatus status = 3;
}

// GlobalVrouterConfigList is a list of GlobalVrouterConfig.
message GlobalVrouterConfigList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the GlobalVrouterConfig instances in the GlobalVrouterConfigList.
  repeated GlobalVrouterConfig items = 2;
}

// GlobalVrouterConfigSpec defines the desired state of GlobalVrouterConfig
message GlobalVrouterConfigSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Parent contains the ObjectReference to the parent GlobalSystemConfig.
  optional k8s.io.api.core.v1.ObjectReference parent = 2;

  // EncapsulationPriorities is an ordered list of encapsulation types to be
  // used in priority by the vrouter. Valid encapsulation types include MPLSoGRE,
  // MPLSoUDP, and VXLAN.
  // +optional
  optional EncapsulationPriorities encapsulationPriorities = 3;

  optional LinklocalServices linklocalServices = 4;

  // PortTranslationPools contains the defined SNAT port translation pools.
  // +optional
  optional PortTranslationPools portTranslationPools = 5;

  // FlowExportRate is the rate at which each vrouter will sample and export
  // flow records to analytics.
  // +optional
  optional int32 flowExportRate = 6;
}

// GlobalVrouterConfigStatus defines the observed state of GlobalVrouterConfig
message GlobalVrouterConfigStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// IPRange specifies the start and end for a range of IP addresses.
message IPRange {
  // From indicates beginning IP address for the allocation range.
  optional string from = 1;

  // To indicates last IP address for the allocation range.
  optional string to = 2;
}

// ImportVirtualNetworkRouter is a list of other VirtualNetworkRouters imported
// by the current VirtualNetworkRouter.
message ImportVirtualNetworkRouter {
  // VirtualNetworkRouters is a list of VirtualNetworkRouterEntry.
  repeated VirtualNetworkRouterEntry virtualNetworkRouters = 1;
}

// InstanceIP represents an IP address and its configuration used for interfaces.
// +k8s:openapi-gen=true
// +resource:path=instanceips,strategy=InstanceIPStrategy,shortname=iip,categories=contrail;ipam;networking
message InstanceIP {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the InstanceIP.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional InstanceIPSpec spec = 2;

  // The most recently observed status of the InstanceIP.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional InstanceIPStatus status = 3;
}

// InstanceIPList is a list of InstanceIP.
message InstanceIPList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the InstanceIP instances in the InstanceIPList.
  repeated InstanceIP items = 2;
}

// InstanceIPSpec defines the desired state of the InstanceIP.
message InstanceIPSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // IP address value for InstanceIP.
  // +optional
  optional string instanceIPAddress = 2;

  // IP address family for the InstanceIP: "v4" or "v6" for IPv4 or IPv6.
  // +optional
  optional string instanceIPFamily = 3;

  // Subnet is the CIDR the InstanceIP belongs to.
  // +optional
  optional string cidr = 4;

  // VirtualNetworkReference determines the VirtualNetwork the InstanceIP belongs to.
  // +optional
  optional ResourceReference virtualNetworkReference = 5;

  // VirtualMachineInterfaceReferences determines the VirtualMachineInterface
  // the InstanceIP belongs to.
  // +optional
  repeated ResourceReference virtualMachineInterfaceReferences = 6;

  // IPRangeKeys is used to identify the subnet range for IP allocation.
  // +optional
  repeated string ipRangeKeys = 7;
}

// InstanceIPStatus defines the observed state of the InstanceIP.
message InstanceIPStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // SubnetReference refers to the Subnet this InstanceIP belongs to.
  // +optional
  optional ResourceReference subnetReference = 2;
}

// LinklocalServiceEntryType specifies parameters for configurable LinkLocalServices.
message LinklocalServiceEntryType {
  // DNS name to which link local service will be proxied.
  optional string ipFabricDNSServiceName = 1;

  // Destination ip address to which link local traffic will forwarded.
  repeated string ipFabricServiceIP = 2;

  // Destination TCP port number to which link local traffic will forwarded.
  optional int32 ipFabricServicePort = 3;

  // ip address of the link local service.
  optional string linklocalServiceIP = 4;

  // Name of the link local service. VM name resolution of this name will result in
  //  link local ip address
  optional string linklocalServiceName = 5;

  // Destination TCP port number of link local service
  optional int32 linklocalServicePort = 6;
}

// LinklocalServices is list of LinkLocalServices
message LinklocalServices {
  repeated LinklocalServiceEntryType linklocalServiceEntry = 1;
}

// MACAddresses is a list of MACAddress
message MACAddresses {
  // MACAddresses is list of unique identifier assigned to network interface.
  repeated string macAddress = 1;
}

// PolicyBasedForwardingRule is the automatically generated Forwarding policy.
message PolicyBasedForwardingRule {
  // Direction specifies traffic direction allowed for PolicyBasedForwardingRule.
  // +optional
  optional string direction = 1;
}

// PortRange encapsulates the start and end of a range of IP ports.
message PortRange {
  // StartPort represents the starting port number.
  // It must be less than or equal to EndPort.
  optional int32 startPort = 1;

  // EndPort represents the last allocatable port number.
  // It must be greater than or equal to StartPort.
  optional int32 endPort = 2;
}

// PortTranslationPool represents a range or quantity of available ports for a
// given protocol. Protocol is required. PortRange is optional defaults to nil.
// PortCount is optional defaults to 0. Only one of PortRange and PortCount may
// be set for the PortTranslationPool to be valid.
message PortTranslationPool {
  // Protocol specifies the protocol this pools is for.
  optional string protocol = 1;

  // PortRange defines the range from which port numbers may be allocated.
  // If PortRange is set, PortCount must be 0.
  // +optional
  optional PortRange portRange = 2;

  // PortCount defines the maximum amount of port numbers to be allocated.
  // If PortCount is greater than 0, PortRange must be empty.
  // +optional
  optional int32 portCount = 3;
}

// PortTranslationPools represents a collection of PortTranslationPool
// configurations.
message PortTranslationPools {
  // Pools is the list of PortTranslationPool instances.
  // +optional
  repeated PortTranslationPool pools = 1;
}

// PortType defines the Port number.
message PortType {
  // StartPort defines the starting port number of the FirewallServiceType.
  // +optional
  optional int64 startPort = 1;

  // EndPort defines the ending port number of the FirewallServiceType.
  // +optional
  optional int64 endPort = 2;
}

// Range is a list of IPRanges associated with a given key.
message Range {
  // Key is a text string defining the Range collection. Setting a Range with
  // an existing key will overwrite the exiting Range.
  optional string key = 1;

  // IPRanges lists one or more IPRange instance.
  repeated IPRange ipRanges = 2;
}

// ReconcilerState describes a resource's reconciliation status including the State
// of the reconciliation as well as an Observation with additional information about
// the State.
message ReconcilerState {
  // State describe the current readiness of a resource after the last reconciliation.
  // The possible states include Pending, Success, and Failure.
  optional string state = 1;

  // Observation provides additional information related to the state of the
  // resource. For example, if a reconciliation error occurs, Observation will
  // contain a brief description of the problem.
  optional string observation = 2;
}

// ResourceReference is an ObjectReference to a Contrail resource that contains
// the ContrailFqName of the resource being referenced.
message ResourceReference {
  optional k8s.io.api.core.v1.ObjectReference objectReference = 1;

  optional ContrailFqName contrailFqName = 2;
}

// RouteOriginOverride is used to override route origin attribute.
message RouteOriginOverride {
  // Set true to override Route origin with the given value
  // +optional
  optional bool originOverride = 1;

  // User define route origin value
  // +optional
  optional string origin = 2;
}

// RouteTarget is a route-target extended community, a type of BGP extended
// community that used to define VPN membership. The route target appears in a
// field in route update.
// +k8s:openapi-gen=true
// +resource:path=routetargets,strategy=RouteTargetStrategy,shortname=rt,categories=contrail;routing
message RouteTarget {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the RouteTarget.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional RouteTargetSpec spec = 2;

  // The most recently observed status of the RouteTarget.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional RouteTargetStatus status = 3;
}

// RouteTargetList is a list of RouteTarget.
message RouteTargetList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the RouteTarget instances in the RouteTargetList.
  repeated RouteTarget items = 2;
}

// RouteTargetReference contains a RouteTarget reference and the
// import/export mode in their attributes.
message RouteTargetReference {
  optional ResourceReference resourceReference = 1;

  // Attributes contains the ImportExport flag. When ImportExport is blank (the default),
  // both import and export are supported. Setting ImportExport to "import" enables
  // import-only mode. Setting it to "export" enables export-only mode.
  // +optional
  optional RouteTargetReferenceAttributes attributes = 2;
}

// RouteTargetReferenceAttributes allows the configuration of import/export mode.
message RouteTargetReferenceAttributes {
  // ImportExport determines the import/export mode. By default, this field is
  // empty. When ImportExport is blank, bott import and export are supported.
  // Setting ImportExport to "import" enables import-only mode. Setting it to
  // "export" enables export-only mode.
  // +optional
  optional string importExport = 1;
}

// RouteTargetSpec defines the desired state of a RouteTarget.
message RouteTargetSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;
}

// RouteTargetStatus defines the observed state of a RouteTarget.
message RouteTargetStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// RoutingInstance is a group of customer attachment points with the same
// connectivity policies. Corresponding to the VRF in L3VPN/EVPN.
// +k8s:openapi-gen=true
// +resource:path=routinginstances,strategy=RoutingInstanceStrategy,shortname=ri,categories=contrail;routing
message RoutingInstance {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the RoutingInstance.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional RoutingInstanceSpec spec = 2;

  // The most recently observed status of the RoutingInstance.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional RoutingInstanceStatus status = 3;
}

// RoutingInstanceList is a list of RoutingInstance.
message RoutingInstanceList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the RoutingInstance instances in the RoutingInstanceList.
  repeated RoutingInstance items = 2;
}

// RoutingInstanceReference contains a RoutingInstance reference and an Attributes
// instance defining a policy forwarding rule.
message RoutingInstanceReference {
  optional ResourceReference resourceReference = 1;

  // Attributes contains a policy forwarding rule which specifies the traffic
  // direction (ingress, egress or both) for the routes to an optimal gateway.
  optional PolicyBasedForwardingRule attributes = 2;
}

// RoutingInstanceSpec defines the desired state of the RoutingInstance.
message RoutingInstanceSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Object reference to the parent VirtualNetwork.
  optional k8s.io.api.core.v1.ObjectReference parent = 2;

  // RouteTargetReferences contains RouteTarget references assigned by the user.
  // The RoutingInstance's default RouteTarget is defined in RoutingInstanceStatus.
  // +optional
  repeated RouteTargetReference routeTargetReferences = 3;
}

// RoutingInstanceStatus defines the observed state of the RoutingInstance.
message RoutingInstanceStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // Is this the default routing instance for the VirtualNetwork? This
  // field contains internal service chaining information, and should not be
  // modified.
  // +optional
  optional bool isDefault = 2;

  // FabricSNAT toggles connectivity to underlay network by port mapping.
  // +optional
  optional bool routingInstanceFabricSNAT = 3;

  // DefaultRouteTargetReference contains a reference to the default RouteTarget
  // and the import/export mode in their attributes.
  // Only set by the system as user must pass by higher level resources to
  // add remove Route Target.
  // +optional
  optional RouteTargetReference defaultRouteTargetReference = 4;

  // VirtualNetworkRouterRouteTargetReferences are RouteTarget references of VirtualNetworkRouters
  // selecting this RoutingInstance's parent VirtualNetwork, as well as those of
  // imported VirtualNetworkRouters.
  // +optional
  map<string, VirtualNetworkRouteTargetReferenceList> virtualNetworkRouterRouteTargetReferences = 5;
}

// Subnet represents a block of IP addresses and its configuration.
// IPAM allocates and releases IP address from that block on demand.
// It can be used by different VirtualNetwork in the mean time.
// +k8s:openapi-gen=true
// +resource:path=subnets,strategy=SubnetStrategy,shortname=sn,categories=contrail;ipam;networking
message Subnet {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the Subnet.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional SubnetSpec spec = 2;

  // The most recently observed status of the Subnet.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional SubnetStatus status = 3;
}

// SubnetList is a list of Subnet.
message SubnetList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the Subnet instances in the SubnetList.
  repeated Subnet items = 2;
}

// SubnetReference contains a Subnet reference and a BGPSessionIPAttributes
// instance defining the BGPaaSPrimaryIP and BGPaaSSecondaryIP addresses.
message SubnetReference {
  optional ResourceReference resourceReference = 1;

  optional BGPSessionIPAttributes attributes = 2;
}

// SubnetSpec defines the desired state of a Subnet.
message SubnetSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Subnet range in CIDR notation.
  // +optional
  optional string cidr = 3;

  // Default Gateway IP address in the subnet.
  // If not provided, one is auto-generated by the system.
  // +optional
  optional string defaultGateway = 4;

  // List of DNS servers associated with the subnet.
  // +optional
  repeated string dnsNameservers = 5;

  // Ranges, when present, define the IP allocation ranges corresponding to
  // a given key.
  // If not provided, IP allocation is determined by the CIDR.
  // +optional
  repeated Range ranges = 6;

  // Disables auto allocation of BGPaaSPrimaryIP and BGPaaSecondaryIP. False by
  // default, automatic allocation is enabled. IPs are auto allocated when at
  // least one BGPAsAService is configured under this subnet. If DisableBGPaaSIPAutoAllocation
  // is set to true, BGPaaSPrimaryIP and BGPaaSSecondaryIP must be specified.
  // Leave this flag false if the BGPAsAService feature is not required.
  // +optional
  optional bool disableBGPaaSIPAutoAllocation = 7;

  // Primary IP address used for the BGP as a service session.
  // +optional
  optional string bgpaasPrimaryIP = 8;

  // Secondary IP address used for the BGP as a service session when the
  // second control node is present.
  // +optional
  optional string bgpaasSecondaryIP = 9;
}

// SubnetStatus defines the observed state of a Subnet.
message SubnetStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // IPCount is the current number of allocated IP addresses in the Subnet.
  // +optional
  optional int64 ipCount = 2;

  // AllocationUsage is current percentage of allocated addresses in the Subnet.
  // +optional
  optional string allocationUsage = 3;
}

// Tag is the representation of the Tag resource.
// +k8s:openapi-gen=true
// +resource:path=tags,strategy=TagStrategy,shortname=t,categories=contrail;security
message Tag {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of Tag resource.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional TagSpec spec = 2;

  // The most recently observed status of the Tag object.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional TagStatus status = 3;
}

// TagList is a list of Tag.
message TagList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the Tag instances in the TagList.
  repeated Tag items = 2;
}

// TagSpec defines the desired state of Tag
message TagSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // TagTypeName defines name of Tag Type object in string format.
  optional string tagTypeName = 2;

  // TagValue defines namee of Tag Value object in string format.
  optional string tagValue = 3;

  // TagTypeReference is reference to Tagtype object attachd to this Tag object.
  optional ResourceReference tagTypeReference = 4;
}

// TagStatus defines the observed state of Tag.
message TagStatus {
  // Common status fields.
  optional CommonStatus commonStatus = 1;

  // TagID is an internal representation of Tag object encapsulating
  // tag type and value in hexadecimal format.
  optional string tagId = 2;
}

// TagType is the representation of the TagType resource.
// +k8s:openapi-gen=true
// +resource:path=tagtypes,strategy=TagTypeStrategy,shortname=tt,categories=contrail;security
message TagType {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of TagType resource.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional TagTypeSpec spec = 2;

  // The most recently observed status of the TagType object.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional TagTypeStatus status = 3;
}

// TagTypeList is a list of TagType.
message TagTypeList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the TagType instances in the TagTypeList.
  repeated TagType items = 2;
}

// TagTypeSpec defines the desired state of TagType
message TagTypeSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;
}

// TagTypeStatus defines the observed state of TagType
message TagTypeStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // TagTypeID is an internal representation of TagType object, encapsulating
  // tag type in hexadecimal format.
  optional string tagTypeId = 2;
}

// VirtualMachine represents a computational resource, for example, a virtual machine,
// bare metal server, or container.
// +k8s:openapi-gen=true
// +resource:path=virtualmachines,strategy=VirtualMachineStrategy,shortname=vm,categories=contrail;networking
message VirtualMachine {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the VirtualMachine.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualMachineSpec spec = 2;

  // The most recently observed status of the VirtualMachine.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualMachineStatus status = 3;
}

// VirtualMachineInterface represents an interface(port) into virtual network.
// It may or may not have corresponding virtual machine. A virtual machine
// interface has at least a MAC address and an IP address.
// +k8s:openapi-gen=true
// +resource:path=virtualmachineinterfaces,strategy=VirtualMachineInterfaceStrategy,shortname=vmi,categories=contrail;networking
message VirtualMachineInterface {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VirtualMachineInterfaceSpec spec = 2;

  optional VirtualMachineInterfaceStatus status = 3;
}

// VirtualMachineInterfaceList is a list of VirtualMachineInterface.
message VirtualMachineInterfaceList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the VirtualMachineInterface instances in the VirtualMachineInterfaceList.
  repeated VirtualMachineInterface items = 2;
}

// Advanced Properties of the VirtualMachineInterface.
message VirtualMachineInterfaceProperties {
  // 802.1Q VLAN tag to be used if this interface is a sub-interface of
  // other interface.
  // +optional
  optional uint32 subInterfaceVlanTag = 1;
}

// VirtualMachineInterfaceSpec defines the desired state of VirtualMachineInterface.
message VirtualMachineInterfaceSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Object reference to namespace or virtualrouter parent.
  optional k8s.io.api.core.v1.ObjectReference parent = 2;

  // MAC address of the virtual machine interface, automatically assigned by
  // system if not provided.
  optional MACAddresses virtualMachineInterfaceMacAddresses = 3;

  // VirtualNetworkReference determines the Virtual Network the interface belongs to.
  optional ResourceReference virtualNetworkReference = 4;

  // VirtualMachineReferences determines the VirtualMachine the interface belongs
  // to.
  // +optional
  repeated ResourceReference virtualMachineReferences = 5;

  // DisablePolicy disables all policy checks for ingress and egress traffic
  // from this interface. Flow table entries are not created. Features that
  // require policy will not work on this interface, these include security
  // group, floating IP, service chain, linklocal services.
  optional bool virtualMachineInterfaceDisablePolicy = 6;

  // List of (IP address, MAC) other than instance ip on this interface.
  // +optional
  optional AllowedAddressPairs allowedAddressPairs = 7;

  // Port security status on the network.
  optional bool portSecurityEnabled = 8;

  // VirtualMachineInterfaceReferences determines the VirtualMachineInterface
  // instances that are sub-interfaces.
  // +optional
  repeated ResourceReference virtualMachineInterfaceReferences = 9;

  // VirtualMachineInterface properties
  // +optional
  optional VirtualMachineInterfaceProperties properties = 10;

  // Reference to Tag attached to this Virtual Machine Interface
  // +optional
  repeated ResourceReference tagReferences = 11;
}

// VirtualMachineInterfaceStatus defines the observed state of VirtualMachineInterface
message VirtualMachineInterfaceStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // RoutingInstanceReferences lists all routing instance the interface is associated to.
  // Should at least contains the reference to its Virtual Network primary Routing Instance.
  repeated RoutingInstanceReference routingInstanceReferences = 3;

  // BGPRouterReference is bgpaas-client BGPRouter reference for BGP neighbor.
  // Holds the corresponding BGPRouterRef from BGPAsAService
  optional ResourceReference bgpRouterReference = 4;
}

// VirtualMachineList is a list of VirtualMachine.
message VirtualMachineList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the VirtualMachine instances in the VirtualMachineList.
  repeated VirtualMachine items = 2;
}

// VirtualMachineSpec defines the desired state of a VirtualMachine.
message VirtualMachineSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // ServerType indicates the computational type of the VirtualMachine resource.
  // Valid values for ServerType include virtual-server, baremetal-server, or
  // container.
  // +optional
  optional string serverType = 2;

  // ServerName is the name of the VirtualMachine resource.
  optional string serverName = 3;

  // ServerNamespace is the namespace of the VirtualMachine resource.
  optional string serverNamespace = 4;

  // ServerClusterName is the name of the cluster the VirtualMachine resource
  // is to run on.
  optional string serverClusterName = 5;
}

// VirtualMachineStatus defines the observed state of the VirtualMachine.
message VirtualMachineStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// VirtualNetwork is a collection of endpoints (interface or IP(s) or MAC(s))
// that can communicate with each other.
// It is also a collection of subnets whose default gateways are connected by
// an implicit router.
// +k8s:openapi-gen=true
// +resource:path=virtualnetworks,strategy=VirtualNetworkStrategy,shortname=vn,categories=contrail;networking
message VirtualNetwork {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the VirtualNetwork.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualNetworkSpec spec = 2;

  // The most recently observed status of the VirtualNetwork.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualNetworkStatus status = 3;
}

// VirtualNetworkList is a list of VirtualNetwork.
message VirtualNetworkList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the VirtualNetwork instances in the VirtualNetworkList.
  repeated VirtualNetwork items = 2;
}

// VirtualNetworkRouteTargetReferenceList contains RouteTarget references and
// their import/export mode.
message VirtualNetworkRouteTargetReferenceList {
  // RouteTargetReferences is the actual list of RouteTargetReferences.
  // +optional
  repeated RouteTargetReference routeTargetReferences = 1;
}

// VirtualNetworkRouter establishes connectivity between two or more
// VirtualNetworks
// +k8s:openapi-gen=true
// +resource:path=virtualnetworkrouters,strategy=VirtualNetworkRouterStrategy,shortname=vnr
message VirtualNetworkRouter {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired state of the VirtualNetworkRouter.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualNetworkRouterSpec spec = 2;

  // The most recently observed status of the VirtualNetworkRouter.
  // This data may not be up-to-date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional VirtualNetworkRouterStatus status = 3;
}

// VirtualNetworkRouterEntry is a combination of VirtualNetworkRouterSelector and
// NamespaceSelector. Together, these two LabelSelectors identify a VirtualNetworkRouter.
message VirtualNetworkRouterEntry {
  // LabelSelector to identify the VirtualNetworkRouter
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkRouterSelector = 1;

  // LabelSelector to identify the Namespace of the VirtualNetworkRouter.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector namespaceSelector = 2;
}

// VirtualNetworkRouterList is a list of VirtualNetworkRouter.
message VirtualNetworkRouterList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the VirtualNetworkRouter instances in the VirtualNetworkRouterList.
  repeated VirtualNetworkRouter items = 2;
}

// VirtualNetworkRouterSpec defines the desired state of the VirtualNetworkRouter.
message VirtualNetworkRouterSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Type of the VirtualNetworkRouter.
  // Supported types are mesh, spoke and hub.
  optional string type = 2;

  // VirtualNetworkSelector is a LabelSelector to identify VirtualNetworks that
  // this VirtualNetworkRouter should connect to.
  // VirtualNetworkRouter shares its RouteTarget to the connected VirtualNetworks.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkSelector = 3;

  // VirtualNetworkRouter can import other VirtualNetworkRouters to enable
  // connectivity between the VirtualNetworks selected by this VirtualNetworkRouter and
  // VirtualNetworks selected by the imported VirtualNetworkRouter
  // Specify list of VirtualNetworkRouters to import.
  // +optional
  optional ImportVirtualNetworkRouter import = 4;
}

// VirtualNetworkRouterStatus defines the observed state of the VirtualNetworkRouter.
message VirtualNetworkRouterStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

// VirtualNetworkSpec defines the desired state of a VirtualNetwork.
message VirtualNetworkSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // FabricSNAT toggles connectivity to underlay network by port mapping.
  // +optional
  optional bool fabricSNAT = 2;

  // Reference to the v4 family subnet.
  // +optional
  optional ResourceReference v4SubnetReference = 3;

  // Reference to the v6 family subnet.
  // +optional
  optional ResourceReference v6SubnetReference = 4;

  // RouteTargetList is a list of route targets that are used as both import
  // and export for this virtual network.
  // +optional
  repeated string routeTargetList = 5;

  // ImportRouteTargetList is a list of route targets that are used as import
  // for this virtual network.
  // +optional
  repeated string importRouteTargetList = 6;

  // RouteTargetList is a list of route targets that are used as import for
  // this virtual network.
  // +optional
  repeated string exportRouteTargetList = 7;

  // VirtualNetworkProperties defines additional configuration parameters for
  // each virtual network.
  // +optional
  optional VirtualNetworkType virtualNetworkProperties = 8;

  // ProviderNetworkReference is the reference to a provider virtual network,
  // example: ip-fabric.
  // +optional
  optional ResourceReference providerNetworkReference = 9;

  // IsProviderNetwork is a flag that needs to be set to true if VN is a Provider Network
  // Cannot be updated from true to false. Both IsProviderNetwork and
  // FabricForwarding cannot be set to true at the same time.
  // +optional
  optional bool isProviderNetwork = 10;

  // FabricForwarding when set to true adds the ip-fabric VN as a provider network
  // to this virtual network. If provider network already has a reference to a different
  // network, it will be overriden to the ip-fabric VN. Both IsProviderNetwork and
  // FabricForwarding cannot be set to true at the same time.
  // +optional
  optional bool fabricForwarding = 11;
}

// VirtualNetworkStatus defines the observed state of a VirtualNetwork.
message VirtualNetworkStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;

  // System assigned unique 32-bit ID for every virtual network.
  // +optional
  optional int64 virtualNetworkNetworkId = 2;
}

// Advanced properties of the VirtualNetwork.
message VirtualNetworkType {
  // Rpf property enables or disables unicast Reverse Path Forwarding (RPF) on
  // the VirtualNetwork.
  // By Default, Rpf is set to enabled.
  // +optional
  optional string rpf = 1;

  // ForwardingMode is the Packet forwarding mode for this VirtualNetwork.
  // Supported Options are l2, l3 and l2_l3.
  // By Default, ForwardingMode is set to l2_l3.
  // +optional
  optional string forwardingMode = 2;
}

// VirtualRouter is packet forwarding system on devices such as compute
// nodes(servers), TOR(s), routers.
// +k8s:openapi-gen=true
// +resource:path=virtualrouters,strategy=VirtualRouterStrategy,shortname=vr,categories=contrail;contrail-cluster
message VirtualRouter {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VirtualRouterSpec spec = 2;

  optional VirtualRouterStatus status = 3;
}

// VirtualRouterList is a list of VirtualRouter.
message VirtualRouterList {
  // Standard list's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items contains all of the VirtualRouter instances in the VirtualRouterList.
  repeated VirtualRouter items = 2;
}

// VirtualRouterSpec defines the desired state of VirtualRouter
message VirtualRouterSpec {
  // Common spec fields
  optional CommonSpec commonSpec = 1;

  // Parent contains the ObjectReference to the parent GlobalSystemConfig.
  optional k8s.io.api.core.v1.ObjectReference parent = 2;

  // This VirtualRouter's data path is using DPDK library. Virtual machine interfaces
  // scheduled on this compute node will be tagged with additional flags so that they
  // are spawned with user space virtio driver. It is only applicable for embedded
  // VirtualRouters.
  // +optional
  optional bool virtualRouterDpdkEnabled = 3;

  // IP address of the VirtualRouter (required).
  optional string virtualRouterIPAddress = 4;

  // The type of VirtualRouter in the system.
  // +optional
  optional string virtualRouterType = 5;

  // VirtualMachineReferences is the list of all VirtualMachine instances on
  // this vrouter. This link is present for virtual machines associated to
  // Kubernetes Pods.
  // +optional
  // +patchMergeKey=uid
  // +patchStrategy=merge
  repeated ResourceReference virtualMachineReferences = 6;
}

// VirtualRouterStatus defines the observed state of VirtualRouter
message VirtualRouterStatus {
  // Common status fields
  optional CommonStatus commonStatus = 1;
}

