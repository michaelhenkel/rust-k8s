// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `k8s.io_apimachinery_pkg_api_resource_generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Quantity {
    // message fields
    string: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Quantity {
    fn default() -> &'a Quantity {
        <Quantity as ::protobuf::Message>::default_instance()
    }
}

impl Quantity {
    pub fn new() -> Quantity {
        ::std::default::Default::default()
    }

    // optional string string = 1;


    pub fn get_string(&self) -> &str {
        match self.string.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_string(&mut self) {
        self.string.clear();
    }

    pub fn has_string(&self) -> bool {
        self.string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_string(&mut self, v: ::std::string::String) {
        self.string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string(&mut self) -> &mut ::std::string::String {
        if self.string.is_none() {
            self.string.set_default();
        }
        self.string.as_mut().unwrap()
    }

    // Take field
    pub fn take_string(&mut self) -> ::std::string::String {
        self.string.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Quantity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.string)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.string.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.string.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Quantity {
        Quantity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "string",
                |m: &Quantity| { &m.string },
                |m: &mut Quantity| { &mut m.string },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Quantity>(
                "Quantity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Quantity {
        static instance: ::protobuf::rt::LazyV2<Quantity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Quantity::new)
    }
}

impl ::protobuf::Clear for Quantity {
    fn clear(&mut self) {
        self.string.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Quantity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Quantity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4k8s.io_apimachinery_pkg_api_resource_generated.proto\x12$k8s.io.apima\
    chinery.pkg.api.resource\"\"\n\x08Quantity\x12\x16\n\x06string\x18\x01\
    \x20\x01(\tR\x06stringB\nZ\x08resourceJ\xb3\x1b\n\x06\x12\x04\x13\0V\x01\
    \n\x82\x05\n\x01\x0c\x12\x03\x13\0\x122\xac\x04\nCopyright\x20The\x20Kub\
    ernetes\x20Authors.\n\nLicensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\nyou\x20may\x20not\x20use\
    \x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License\
    .\nYou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\nht\
    tp://www.apache.org/licenses/LICENSE-2.0\n\nUnless\x20required\x20by\x20\
    applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\nd\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\
    \x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\nSee\x20th\
    e\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permi\
    ssions\x20and\nlimitations\x20under\x20the\x20License.\n2I\x20This\x20fi\
    le\x20was\x20autogenerated\x20by\x20go-to-protobuf.\x20Do\x20not\x20edit\
    \x20it\x20manually!\n\n\x08\n\x01\x02\x12\x03\x15\x08,\n\x08\n\x01\x08\
    \x12\x03\x18\0\x1f\nA\n\x04\x08\xe7\x07\0\x12\x03\x18\0\x1f\x1a4\x20Pack\
    age-wide\x20variables\x20from\x20generator\x20\"generated\".\n\n\x0c\n\
    \x05\x08\xe7\x07\0\x02\x12\x03\x18\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\0\
    \x12\x03\x18\x07\x11\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x18\x07\
    \x11\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x18\x14\x1e\n\xc0\x14\n\x02\
    \x04\0\x12\x04T\0V\x01\x1a\xb3\x14\x20Quantity\x20is\x20a\x20fixed-point\
    \x20representation\x20of\x20a\x20number.\n\x20It\x20provides\x20convenie\
    nt\x20marshaling/unmarshaling\x20in\x20JSON\x20and\x20YAML,\n\x20in\x20a\
    ddition\x20to\x20String()\x20and\x20AsInt64()\x20accessors.\n\n\x20The\
    \x20serialization\x20format\x20is:\n\n\x20<quantity>\x20\x20\x20\x20\x20\
    \x20\x20\x20::=\x20<signedNumber><suffix>\n\x20\x20\x20(Note\x20that\x20\
    <suffix>\x20may\x20be\x20empty,\x20from\x20the\x20\"\"\x20case\x20in\x20\
    <decimalSI>.)\n\x20<digit>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::\
    =\x200\x20|\x201\x20|\x20...\x20|\x209\n\x20<digits>\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20::=\x20<digit>\x20|\x20<digit><digits>\n\x20<number>\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<digits>\x20|\x20<digits>\
    .<digits>\x20|\x20<digits>.\x20|\x20.<digits>\n\x20<sign>\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20\"+\"\x20|\x20\"-\"\n\x20<sig\
    nedNumber>\x20\x20\x20\x20::=\x20<number>\x20|\x20<sign><number>\n\x20<s\
    uffix>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<binarySI>\x20|\x20\
    <decimalExponent>\x20|\x20<decimalSI>\n\x20<binarySI>\x20\x20\x20\x20\
    \x20\x20\x20\x20::=\x20Ki\x20|\x20Mi\x20|\x20Gi\x20|\x20Ti\x20|\x20Pi\
    \x20|\x20Ei\n\x20\x20\x20(International\x20System\x20of\x20units;\x20See\
    :\x20http://physics.nist.gov/cuu/Units/binary.html)\n\x20<decimalSI>\x20\
    \x20\x20\x20\x20\x20\x20::=\x20m\x20|\x20\"\"\x20|\x20k\x20|\x20M\x20|\
    \x20G\x20|\x20T\x20|\x20P\x20|\x20E\n\x20\x20\x20(Note\x20that\x201024\
    \x20=\x201Ki\x20but\x201000\x20=\x201k;\x20I\x20didn't\x20choose\x20the\
    \x20capitalization.)\n\x20<decimalExponent>\x20::=\x20\"e\"\x20<signedNu\
    mber>\x20|\x20\"E\"\x20<signedNumber>\n\n\x20No\x20matter\x20which\x20of\
    \x20the\x20three\x20exponent\x20forms\x20is\x20used,\x20no\x20quantity\
    \x20may\x20represent\n\x20a\x20number\x20greater\x20than\x202^63-1\x20in\
    \x20magnitude,\x20nor\x20may\x20it\x20have\x20more\x20than\x203\x20decim\
    al\n\x20places.\x20Numbers\x20larger\x20or\x20more\x20precise\x20will\
    \x20be\x20capped\x20or\x20rounded\x20up.\n\x20(E.g.:\x200.1m\x20will\x20\
    rounded\x20up\x20to\x201m.)\n\x20This\x20may\x20be\x20extended\x20in\x20\
    the\x20future\x20if\x20we\x20require\x20larger\x20or\x20smaller\x20quant\
    ities.\n\n\x20When\x20a\x20Quantity\x20is\x20parsed\x20from\x20a\x20stri\
    ng,\x20it\x20will\x20remember\x20the\x20type\x20of\x20suffix\n\x20it\x20\
    had,\x20and\x20will\x20use\x20the\x20same\x20type\x20again\x20when\x20it\
    \x20is\x20serialized.\n\n\x20Before\x20serializing,\x20Quantity\x20will\
    \x20be\x20put\x20in\x20\"canonical\x20form\".\n\x20This\x20means\x20that\
    \x20Exponent/suffix\x20will\x20be\x20adjusted\x20up\x20or\x20down\x20(wi\
    th\x20a\n\x20corresponding\x20increase\x20or\x20decrease\x20in\x20Mantis\
    sa)\x20such\x20that:\n\x20\x20\x20a.\x20No\x20precision\x20is\x20lost\n\
    \x20\x20\x20b.\x20No\x20fractional\x20digits\x20will\x20be\x20emitted\n\
    \x20\x20\x20c.\x20The\x20exponent\x20(or\x20suffix)\x20is\x20as\x20large\
    \x20as\x20possible.\n\x20The\x20sign\x20will\x20be\x20omitted\x20unless\
    \x20the\x20number\x20is\x20negative.\n\n\x20Examples:\n\x20\x20\x201.5\
    \x20will\x20be\x20serialized\x20as\x20\"1500m\"\n\x20\x20\x201.5Gi\x20wi\
    ll\x20be\x20serialized\x20as\x20\"1536Mi\"\n\n\x20Note\x20that\x20the\
    \x20quantity\x20will\x20NEVER\x20be\x20internally\x20represented\x20by\
    \x20a\n\x20floating\x20point\x20number.\x20That\x20is\x20the\x20whole\
    \x20point\x20of\x20this\x20exercise.\n\n\x20Non-canonical\x20values\x20w\
    ill\x20still\x20parse\x20as\x20long\x20as\x20they\x20are\x20well\x20form\
    ed,\n\x20but\x20will\x20be\x20re-emitted\x20in\x20their\x20canonical\x20\
    form.\x20(So\x20always\x20use\x20canonical\n\x20form,\x20or\x20don't\x20\
    diff.)\n\n\x20This\x20format\x20is\x20intended\x20to\x20make\x20it\x20di\
    fficult\x20to\x20use\x20these\x20numbers\x20without\n\x20writing\x20some\
    \x20sort\x20of\x20special\x20handling\x20code\x20in\x20the\x20hopes\x20t\
    hat\x20that\x20will\n\x20cause\x20implementors\x20to\x20also\x20use\x20a\
    \x20fixed\x20point\x20implementation.\n\n\x20+protobuf=true\n\x20+protob\
    uf.embed=string\n\x20+protobuf.options.marshal=false\n\x20+protobuf.opti\
    ons.(gogoproto.goproto_stringer)=false\n\x20+k8s:deepcopy-gen=true\n\x20\
    +k8s:openapi-gen=true\n\n\n\n\x03\x04\0\x01\x12\x03T\x08\x10\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03U\x02\x1d\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03U\x02\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03U\x0b\x11\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03U\x12\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03U\x1b\x1c\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
